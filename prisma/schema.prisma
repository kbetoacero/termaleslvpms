// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USUARIOS Y AUTENTICACI√ìN
// ============================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(STAFF)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reservations  Reservation[]
  payments      Payment[]
  activityLogs  ActivityLog[]
  notifications Notification[] // üëà Agregar esta l√≠nea

  // HOUSEKEEPING
  assignedTasks HousekeepingTask[] @relation("AssignedTasks")
  createdTasks  HousekeepingTask[] @relation("CreatedTasks")
  cleaningLogs  CleaningLog[]      @relation("CleaningLogs")
}

enum UserRole {
  ADMIN
  MANAGER
  RECEPTIONIST
  STAFF
  HOUSEKEEPING
}

// ============================================
// INVENTARIO - HABITACIONES Y ESPACIOS
// ============================================

model RoomType {
  id          String       @id @default(cuid())
  name        String
  description String?
  category    RoomCategory
  capacity    Int
  basePrice   Decimal      @db.Decimal(10, 2)
  images      String[]
  amenities   String[]
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  rooms      Room[]
  priceRules PriceRule[]
}

enum RoomCategory {
  HABITACION
  CAMPING
  GLAMPING
}

model Room {
  id         String     @id @default(cuid())
  roomTypeId String
  roomType   RoomType   @relation(fields: [roomTypeId], references: [id])
  number     String     @unique
  floor      String?
  status     RoomStatus @default(AVAILABLE)
  notes      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  reservations ReservationRoom[]
  maintenances Maintenance[]

  // HOUSEKEEPING
  cleaningStatus    CleaningStatus     @default(CLEAN)
  lastCleaned       DateTime?
  assignedTo        String?
  cleaningPriority  CleaningPriority   @default(NORMAL)
  housekeepingTasks HousekeepingTask[]
  cleaningLogs      CleaningLog[]
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  CLEANING
  BLOCKED
}

// ============================================
// SISTEMA DE RESERVAS
// ============================================

model Reservation {
  id                String            @id @default(cuid())
  reservationNumber String            @unique
  type              ReservationType
  status            ReservationStatus @default(PENDING)

  // Fechas
  checkIn   DateTime
  checkOut  DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Cliente
  guestId String
  guest   Guest  @relation(fields: [guestId], references: [id])

  // Informaci√≥n adicional
  adults          Int
  children        Int     @default(0)
  specialRequests String?
  notes           String?

  // Financiero
  totalAmount   Decimal @db.Decimal(10, 2)
  paidAmount    Decimal @default(0) @db.Decimal(10, 2)
  pendingAmount Decimal @db.Decimal(10, 2)

  // Usuario que cre√≥ la reserva
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Relaciones
  rooms         ReservationRoom[]
  dayPasses     DayPass[]
  campingSpaces CampingSpace[]
  services      ReservationService[]
  payments      Payment[]
}

enum ReservationType {
  HABITACION
  PASADIA
  CAMPING
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
  NO_SHOW
}

model ReservationRoom {
  id            String      @id @default(cuid())
  reservationId String
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  roomId        String
  room          Room        @relation(fields: [roomId], references: [id])
  nightlyRate   Decimal     @db.Decimal(10, 2)
  nights        Int
  subtotal      Decimal     @db.Decimal(10, 2)

  @@unique([reservationId, roomId])
}

model DayPass {
  id             String      @id @default(cuid())
  reservationId  String
  reservation    Reservation @relation(fields: [reservationId], references: [id])
  packageType    String
  date           DateTime
  persons        Int
  pricePerPerson Decimal     @db.Decimal(10, 2)
  subtotal       Decimal     @db.Decimal(10, 2)
  arrivalTime    String?
}

model CampingSpace {
  id                 String      @id @default(cuid())
  reservationId      String
  reservation        Reservation @relation(fields: [reservationId], references: [id])
  spaceType          String
  nights             Int
  persons            Int
  pricePerNight      Decimal     @db.Decimal(10, 2)
  subtotal           Decimal     @db.Decimal(10, 2)
  additionalServices Json?
}

// ============================================
// CLIENTES (CRM)
// ============================================

model Guest {
  id                   String    @id @default(cuid())
  firstName            String
  lastName             String
  email                String?   @unique
  phone                String
  identificationType   String?
  identificationNumber String?
  country              String?
  city                 String?
  address              String?
  birthDate            DateTime?
  notes                String?
  isVIP                Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  reservations Reservation[]
}

// ============================================
// SERVICIOS ADICIONALES
// ============================================

model Service {
  id               String          @id @default(cuid())
  name             String
  description      String?
  category         ServiceCategory
  price            Decimal         @db.Decimal(10, 2)
  isActive         Boolean         @default(true)
  requiresQuantity Boolean         @default(true)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  reservationServices ReservationService[]
}

enum ServiceCategory {
  RESTAURANTE
  SPA
  TRANSPORTE
  LAVANDERIA
  CAMPING_EXTRAS
  OTROS
}

model ReservationService {
  id            String      @id @default(cuid())
  reservationId String
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  serviceId     String
  service       Service     @relation(fields: [serviceId], references: [id])
  quantity      Int
  unitPrice     Decimal     @db.Decimal(10, 2)
  subtotal      Decimal     @db.Decimal(10, 2)
  date          DateTime    @default(now())
  notes         String?
}

// ============================================
// SISTEMA DE PAGOS
// ============================================

model Payment {
  id            String        @id @default(cuid())
  reservationId String
  reservation   Reservation   @relation(fields: [reservationId], references: [id])
  amount        Decimal       @db.Decimal(10, 2)
  method        PaymentMethod
  reference     String?
  status        PaymentStatus @default(COMPLETED)
  notes         String?
  createdAt     DateTime      @default(now())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
  ONLINE
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// ============================================
// PRECIOS DIN√ÅMICOS
// ============================================

model PriceRule {
  id         String   @id @default(cuid())
  roomTypeId String
  roomType   RoomType @relation(fields: [roomTypeId], references: [id])
  name       String
  startDate  DateTime
  endDate    DateTime
  multiplier Decimal  @db.Decimal(3, 2)
  isActive   Boolean  @default(true)
  priority   Int      @default(0)

  // ‚≠ê NUEVOS CAMPOS PARA RECURRENCIA
  isRecurring      Boolean        @default(false)
  recurringType    RecurringType?
  daysOfWeek       Int[] // Array de d√≠as: 0=Domingo, 1=Lunes, ..., 6=S√°bado
  recurringEndDate DateTime? // Hasta qu√© fecha se repite

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ‚≠ê NUEVO ENUM
enum RecurringType {
  WEEKLY // Se repite semanalmente
  MONTHLY // Se repite mensualmente (mismo d√≠a del mes)
  CUSTOM // D√≠as espec√≠ficos de la semana
}

// ============================================
// MANTENIMIENTO
// ============================================

model Maintenance {
  id          String              @id @default(cuid())
  roomId      String
  room        Room                @relation(fields: [roomId], references: [id])
  description String
  priority    MaintenancePriority
  status      MaintenanceStatus   @default(PENDING)
  reportedAt  DateTime            @default(now())
  completedAt DateTime?
  notes       String?
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// ============================================
// LOGS Y AUDITOR√çA
// ============================================

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String
  entity    String
  entityId  String?
  details   Json?
  ipAddress String?
  createdAt DateTime @default(now())
}

// Agregar al final de tu prisma/schema.prisma

// ============================================
// SISTEMA DE NOTIFICACIONES
// ============================================

model Notification {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type    NotificationType
  title   String
  message String
  link    String? // URL para navegar al hacer clic

  isRead Boolean   @default(false)
  readAt DateTime?

  // Metadata adicional (JSON para flexibilidad)
  metadata Json?

  createdAt DateTime @default(now())

  @@index([userId, isRead])
  @@index([createdAt])
}

enum NotificationType {
  CHECKIN // Check-in pendiente
  CHECKOUT // Check-out del d√≠a
  NEW_RESERVATION // Nueva reserva creada
  PAYMENT_PENDING // Pago pendiente
  PAYMENT_RECEIVED // Pago recibido
  MAINTENANCE // Mantenimiento urgente
  LOW_INVENTORY // Pocas habitaciones disponibles
  SYSTEM // Notificaci√≥n del sistema
}


// ============================================
// HOUSEKEEPING - GESTI√ìN DE LIMPIEZA
// ============================================

// Agregar al modelo Room existente:
// cleaningStatus    CleaningStatus @default(CLEAN)
// lastCleaned       DateTime?
// assignedTo        String?
// cleaningPriority  CleaningPriority @default(NORMAL)
// housekeepingTasks HousekeepingTask[]
// cleaningLogs      CleaningLog[]

enum CleaningStatus {
  DIRTY // Sucia - Despu√©s del check-out
  CLEANING // En limpieza - Asignada/en proceso
  CLEAN // Limpia - Lista para check-in
  INSPECTED // Inspeccionada - Verificada por supervisor
  OUT_OF_ORDER // Fuera de servicio - Mantenimiento
}

enum CleaningPriority {
  LOW // Baja - Sin urgencia
  NORMAL // Normal - Limpieza est√°ndar
  HIGH // Alta - Check-in pr√≥ximo
  URGENT // Urgente - Check-in inmediato
}

enum TaskStatus {
  PENDING // Pendiente
  IN_PROGRESS // En progreso
  COMPLETED // Completada
  CANCELLED // Cancelada
}

enum TaskType {
  CHECKOUT_CLEANING // Limpieza despu√©s del check-out
  DAILY_CLEANING // Limpieza diaria durante estad√≠a
  GUEST_REQUEST // Solicitud del hu√©sped
  INSPECTION // Inspecci√≥n
  DEEP_CLEANING // Limpieza profunda
  MAINTENANCE // Mantenimiento preventivo
}

// Tarea de limpieza
model HousekeepingTask {
  id     String @id @default(cuid())
  roomId String
  room   Room   @relation(fields: [roomId], references: [id])

  type     TaskType
  status   TaskStatus       @default(PENDING)
  priority CleaningPriority @default(NORMAL)

  // Asignaci√≥n
  assignedToId String?
  assignedTo   User?     @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedAt   DateTime?

  // Supervisor que cre√≥ la tarea
  createdById String
  createdBy   User   @relation("CreatedTasks", fields: [createdById], references: [id])

  // Tiempos
  startedAt        DateTime?
  completedAt      DateTime?
  estimatedMinutes Int       @default(30) // Tiempo estimado
  actualMinutes    Int? // Tiempo real

  // Detalles
  notes        String?
  guestRequest String? // Si es solicitud del hu√©sped

  // Checklist
  checklistItems ChecklistItem[]

  // Problemas reportados
  issues              String?
  requiresMaintenance Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([roomId])
  @@index([assignedToId])
  @@index([status])
  @@index([createdAt])
}

// Items del checklist
model ChecklistItem {
  id     String           @id @default(cuid())
  taskId String
  task   HousekeepingTask @relation(fields: [taskId], references: [id], onDelete: Cascade)

  templateId String?
  template   ChecklistTemplate? @relation(fields: [templateId], references: [id])

  description String
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  order       Int       @default(0)

  @@index([taskId])
}

// Plantillas de checklist (configurables)
model ChecklistTemplate {
  id           String        @id @default(cuid())
  name         String
  description  String?
  roomCategory RoomCategory? // null = aplica a todas

  items          ChecklistTemplateItem[]
  checklistItems ChecklistItem[]

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChecklistTemplateItem {
  id         String            @id @default(cuid())
  templateId String
  template   ChecklistTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  description String
  order       Int     @default(0)
  isRequired  Boolean @default(true)

  @@index([templateId])
}

// Historial de limpieza
model CleaningLog {
  id     String @id @default(cuid())
  roomId String
  room   Room   @relation(fields: [roomId], references: [id])

  taskId String?

  previousStatus CleaningStatus
  newStatus      CleaningStatus

  changedById String
  changedBy   User   @relation("CleaningLogs", fields: [changedById], references: [id])

  notes    String?
  duration Int? // Minutos que tom√≥

  createdAt DateTime @default(now())

  @@index([roomId])
  @@index([createdAt])
}

// Actualizar modelo User para incluir relaciones
// Agregar estas l√≠neas al modelo User existente:
// assignedTasks       HousekeepingTask[] @relation("AssignedTasks")
// createdTasks        HousekeepingTask[] @relation("CreatedTasks")
// cleaningLogs        CleaningLog[]      @relation("CleaningLogs")

// Actualizar modelo Room
// Agregar al final del modelo Room existente:
// cleaningStatus      CleaningStatus     @default(CLEAN)
// lastCleaned         DateTime?
// assignedTo          String?
// cleaningPriority    CleaningPriority   @default(NORMAL)
// housekeepingTasks   HousekeepingTask[]
// cleaningLogs        CleaningLog[]
